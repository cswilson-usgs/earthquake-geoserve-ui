{
  "version": 3,
  "file": "earthquake-geoserve-ui.umd.min.js",
  "sources": [
    "ng://earthquake-geoserve-ui/out/src/environments/environment.ts",
    "ng://earthquake-geoserve-ui/out/src/app/coordinates.service.ts",
    "ng://earthquake-geoserve-ui/out/src/app/regions.service.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/admin-region/admin-region.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/authoritative-region/authoritative-region.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/location-dialog/location-dialog.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/geoserve-output.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/list-item/list-item.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/location-output/location-output.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/nearby-place/nearby-place.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/places.service.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/nearby-places/nearby-places.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/neic-catalog-region/neic-catalog-region.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/neic-response-region/neic-response-region.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/no-data/no-data.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/offshore-region/offshore-region.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/tectonic-summary-region/tectonic-summary-region.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/geoserve-output.module.ts"
  ],
  "sourcesContent": [
    "// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'https://earthquake.usgs.gov/ws/geoserve/',\n  siteUrl: 'http://localhost.localdomain'\n};\n",
    "import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, tap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nimport { Coordinates } from './coordinates';\n\n\n@Injectable()\nexport class CoordinatesService {\n\n  private _coordinates: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  public readonly coordinates: Observable<Coordinates> = this._coordinates.asObservable();\n\n\n  constructor() {}\n\n  // ----------------------------------------------------------------------\n  // Public Static Variables\n  // ----------------------------------------------------------------------\n\n  /** Constant used to indicate high degree of confidence. */\n  HIGH_CONFIDENCE = 5;\n\n  /** Constant used to indicate above average confidence. */\n  ABOVE_AVERAGE_CONFIDENCE = 4;\n\n  /** Constant used to indicate moderate degree of confidence. */\n  AVERAGE_CONFIDENCE = 3;\n\n  /** Constant used to indicate below average confidence. */\n  BELOW_AVERAGE_CONFIDENCE = 2;\n\n  /** Constant used to indicate low degree of confidence. */\n  LOW_CONFIDENCE = 1;\n\n  /** Constant used to indicate very low degree of confidence. */\n  NO_CONFIDENCE = 0;\n\n  /**\n   * Constant used to indicate confidence was not computed or an error occurred\n   * while computing the confidence\n   */\n  NOT_COMPUTED = -1;\n\n  /**\n   * Compute Confidence given latitude and longitude. Latitude and longitude\n   * must be strings to keep accuracy.\n   * Confidence is based on the number of digits past the decimal.\n   *\n   * @params latititude {String}\n   * @params longitude {String}\n   *\n   */\n  public computeFromCoordinates (latitude: string, longitude: string): number {\n    if (typeof latitude !== 'string' || typeof longitude !== 'string') {\n      return this.NOT_COMPUTED;\n    }\n\n    let minDecimals;\n\n    const latitudePieces = latitude.split('.'),\n        longitudePieces = longitude.split('.');\n\n    if (latitudePieces.length === 1 || longitudePieces.length === 1) {\n      minDecimals = 0;\n    } else {\n      minDecimals = Math.min(latitudePieces[1].length,\n          longitudePieces[1].length);\n    }\n\n\n    if (minDecimals >= 5) {\n      return this.HIGH_CONFIDENCE;\n    } else if (minDecimals >= 4) {\n      return this.ABOVE_AVERAGE_CONFIDENCE;\n    } else if (minDecimals >= 3) {\n      return this.AVERAGE_CONFIDENCE;\n    } else if (minDecimals >= 2) {\n      return this.BELOW_AVERAGE_CONFIDENCE;\n    } else if (minDecimals >= 1) {\n      return this.LOW_CONFIDENCE;\n    } else if (minDecimals >= 0) {\n      return this.NO_CONFIDENCE;\n    } else {\n      return this.NOT_COMPUTED;\n    }\n  }\n\n\n  /**\n   * Compute Confidence given a geocode result location with an extent.\n   *\n   * @params geocodeLocation {object}\n   *      an esri response via the ArcGIS REST API\n   *\n   * @see https://developers.arcgis.com/en/features/geocoding/\n   */\n  public computeFromGeocode (geocodeLocation: any): number {\n    let confidence,\n        extent,\n        max;\n\n    extent = geocodeLocation.extent;\n\n    // find the largest dimension of the extent\n    if (extent) {\n      max = Math.max(Math.abs(extent.xmax - extent.xmin),\n          Math.abs(extent.ymax - extent.ymin));\n\n      // calculate confidence based on the location's extent\n      if (max < 0.001) {\n        confidence = this.HIGH_CONFIDENCE;\n      } else if (max < 0.01) {\n        confidence = this.ABOVE_AVERAGE_CONFIDENCE;\n      } else if (max < 0.1) {\n        confidence = this.AVERAGE_CONFIDENCE;\n      } else if (max < 1) {\n        confidence = this.BELOW_AVERAGE_CONFIDENCE;\n      } else if (max < 10) {\n        confidence = this.LOW_CONFIDENCE;\n      } else if (max >= 10) {\n        confidence = this.NO_CONFIDENCE;\n      }\n    }\n\n    if (!(confidence === this.HIGH_CONFIDENCE ||\n        confidence === this.ABOVE_AVERAGE_CONFIDENCE ||\n        confidence === this.AVERAGE_CONFIDENCE ||\n        confidence === this.BELOW_AVERAGE_CONFIDENCE ||\n        confidence === this.LOW_CONFIDENCE ||\n        confidence === this.NO_CONFIDENCE)) {\n      // confidence did not match any value, bail\n      confidence = this.NOT_COMPUTED;\n    }\n\n    return confidence;\n  }\n\n\n  /**\n   * Compute Confidence given a accuracy in meters.\n   * used by GeoLocate.\n   * @params accuracy {number} indicates the accuracy in meters at 95%\n   *         confidence.\n   */\n  public computeFromGeolocate (accuracy: number): number {\n    if (accuracy > 100000) {\n      return this.LOW_CONFIDENCE;\n    } else if (accuracy > 10000) {\n      return this.BELOW_AVERAGE_CONFIDENCE;\n    } else if (accuracy > 1000) {\n      return this.AVERAGE_CONFIDENCE;\n    } else if (accuracy > 100) {\n      return this.ABOVE_AVERAGE_CONFIDENCE;\n    } else {\n      return this.HIGH_CONFIDENCE;\n    }\n  }\n\n\n  /**\n   * Compute Confidence given a zoom level.\n   * @params zoom {number} indicates the zoom level of the map.\n   */\n  public computeFromPoint (zoom: number): number {\n    if (zoom > 16) {\n      return this.HIGH_CONFIDENCE;\n    } else if (zoom > 12) {\n      return this.ABOVE_AVERAGE_CONFIDENCE;\n    } else if (zoom > 8) {\n      return this.AVERAGE_CONFIDENCE;\n    } else if (zoom > 4) {\n      return this.BELOW_AVERAGE_CONFIDENCE;\n    } else {\n      return this.LOW_CONFIDENCE;\n    }\n  }\n\n\n  /**\n   * Compute zoom level given a confidence.\n   * @params confidence {number} indicates the confidence level\n   */\n  public computeZoomFromConfidence (confidence: number): number {\n    if (confidence === this.HIGH_CONFIDENCE) {\n      return 16;\n    } else if (confidence === this.ABOVE_AVERAGE_CONFIDENCE) {\n      return 13;\n    } else if (confidence === this.AVERAGE_CONFIDENCE) {\n      return 9;\n    } else if (confidence === this.BELOW_AVERAGE_CONFIDENCE) {\n      return 5;\n    } else if (confidence === this.LOW_CONFIDENCE) {\n      return 1;\n    } else {\n      return 1;\n    }\n  }\n\n\n  /**\n   * returns rounded value based on confidence value.\n   *\n   * @params  {string | number} value\n   *           value to be rounded\n   * @params  {number} confidence\n   *           confidence value\n   * @returnn {number} rounded value\n   *\n   */\n  public roundLocation (value, confidence): number {\n    let rounded,\n        decimals = confidence;\n\n    if (confidence === this.NOT_COMPUTED) {\n      decimals = 0;\n    }\n\n    rounded = parseFloat(value).toFixed(decimals);\n    return parseFloat(rounded);\n  }\n\n  /**\n   * Set the coordinate observable.next value\n   * @params {string} latitude  [description]\n   * @params {string} longitude [description]\n   */\n  public setCoordinates (location: any): void {\n    let confidence,\n        latitude,\n        longitude;\n\n    confidence = location.confidence;\n    latitude = this.roundLocation(+location.latitude, confidence);\n    longitude = this.roundLocation(+location.longitude, confidence);\n\n    this._coordinates.next({\n      confidence: confidence,\n      latitude: latitude,\n      longitude: longitude,\n      zoom: location.zoom,\n      method: location.method,\n      name: location.name\n    });\n  }\n\n}\n",
    "import { Injectable } from '@angular/core';\nimport { HttpClient} from '@angular/common/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, tap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nimport { environment } from '../environments/environment';\n\nimport { CoordinatesService } from './coordinates.service';\n\n@Injectable()\nexport class RegionsService {\n\n  public REGIONS_URL = environment.apiUrl + 'regions.json';\n\n  private _adminRegions: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  private _authoritative: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  private _coordinates: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  private _neicCatalog: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  private _neicResponse: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  private _tectonic: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  private _offshoreRegions: BehaviorSubject<any> =\n      new BehaviorSubject<any>(null);\n\n  public readonly adminRegions: Observable<any> =\n      this._adminRegions.asObservable();\n  public readonly authoritative: Observable<any> =\n      this._authoritative.asObservable();\n  public readonly coordinates: Observable<any> =\n      this._coordinates.asObservable();\n  public readonly neicCatalog: Observable<any> =\n      this._neicCatalog.asObservable();\n  public readonly neicResponse: Observable<any> =\n      this._neicResponse.asObservable();\n  public readonly offshoreRegions: Observable<any> =\n      this._offshoreRegions.asObservable();\n  public readonly tectonic: Observable<any> =\n      this._tectonic.asObservable();\n\n\n  constructor (\n    private coordinatesService: CoordinatesService,\n    private http: HttpClient\n  ) {\n    // subscribe to coordinates service\n    this.coordinatesService.coordinates.subscribe((coordinates) => {\n      // make request to regions service when coordinates update\n      this.getRegions(coordinates.latitude, coordinates.longitude);\n    });\n  }\n\n  empty (): void {\n    this._adminRegions.next(null);\n    this._authoritative.next(null);\n    this._neicCatalog.next(null);\n    this._neicResponse.next(null);\n    this._offshoreRegions.next(null);\n    this._tectonic.next(null);\n  }\n\n  getRegions (latitude: number, longitude: number): void {\n    const url = this.buildUrl(latitude, longitude);\n\n    this.http.get<any>(url).pipe(\n      catchError(this.handleError('getRegions', {}))\n    ).subscribe((data) => {\n      if (data.admin) {\n        this._adminRegions.next(data.admin.features[0]);\n      } else {\n        this._adminRegions.next(null);\n      }\n      if (data.neiccatalog) {\n        this._neicCatalog.next(data.neiccatalog.features[0]);\n      } else {\n        this._neicCatalog.next(null);\n      }\n      if (data.neicresponse) {\n        this._neicResponse.next(data.neicresponse.features[0]);\n      } else {\n        this._neicResponse.next(null);\n      }\n      if (data.tectonic) {\n        this._tectonic.next(data.tectonic.features[0]);\n      } else {\n        this._tectonic.next(null);\n      }\n      if (data.offshore) {\n        this._offshoreRegions.next(data.offshore.features[0]);\n      } else {\n        this._offshoreRegions.next(null);\n      }\n      if (data.authoritative) {\n        this._authoritative.next(data.authoritative.features[0]);\n      } else {\n        this._authoritative.next(null);\n      }\n    });\n  }\n\n  private handleError<T> (action: string, result?: T) {\n    return(error: any): Observable<T> => {\n      console.error('RegionsService::handleError::' + action + '(' + error.message + ')');\n      return of(result as T);\n    };\n  }\n\n  buildUrl (latitude: number, longitude: number): string {\n    // normalize longitude for search\n    while (longitude <= -180) {\n      longitude += 360;\n    }\n    while (longitude > 180) {\n      longitude -= 360;\n    }\n\n    return this.REGIONS_URL + '?' +\n      `latitude=${latitude}` +\n      `&longitude=${longitude}`;\n  }\n}\n",
    "import { Component, OnInit } from '@angular/core';\n\nimport { Region } from '../../region';\nimport { RegionsService } from '../../regions.service';\n\n@Component({\n  selector: 'app-admin-region',\n  template: `<h2>Administrative Region</h2>\n<div *ngIf=\"regionsService.adminRegions | async; else noAdminRegion;\n    let adminRegions\" class=\"output-section\">\n  <dl class=\"admin-region\">\n    <app-list-item TITLE=\"ISO\" DATA=\"{{ adminRegions?.properties.iso }}\">\n    </app-list-item>\n    <app-list-item TITLE=\"Region\" DATA=\"{{ adminRegions?.properties.region }}\">\n    </app-list-item>\n    <app-list-item TITLE=\"Country\" DATA=\"{{ adminRegions?.properties.country }}\">\n    </app-list-item>\n  </dl>\n</div>\n\n<!-- No administrative region was returned -->\n<ng-template #noAdminRegion>\n  <app-no-data></app-no-data>\n<ng-template>\n\n\n`,\n  styles: [``]\n})\nexport class AdminRegionComponent implements OnInit {\n\n  constructor (public readonly regionsService: RegionsService) { }\n\n  ngOnInit() {\n  }\n}\n",
    "import { Component, OnInit } from '@angular/core';\n\nimport { RegionsService } from '../../regions.service';\n\n@Component({\n  selector: 'app-authoritative-region',\n  template: `<h2>Authoritative Region</h2>\n<div *ngIf=\"regionsService.authoritative | async; else noRegion;\n    let region\" class=\"output-section\">\n  <dl>\n    <app-list-item TITLE=\"Name\" DATA=\"{{ region?.properties.name }}\">\n    </app-list-item>\n    <app-list-item TITLE=\"Network\" DATA=\"{{ region?.properties.network }}\">\n    </app-list-item>\n    <app-list-item TITLE=\"Type\" DATA=\"{{ region?.properties.type }}\">\n    </app-list-item>\n  </dl>\n</div>\n\n<ng-template #noRegion>\n  <app-no-data></app-no-data>\n</ng-template>`,\n  styles: [``]\n})\nexport class AuthoritativeRegionComponent implements OnInit {\n\n  constructor(public readonly regionsService: RegionsService) { }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material';\n\n@Component({\n  selector: 'app-location-dialog',\n  template: `\n<h1 mat-dialog-title>Choose a Location</h1>\n<p>\n  Use one of the methods below to add a location to the map.\n</p>\n\n<mat-dialog-content>\n  <mat-accordion class=\"location-controls\">\n    <!-- Geolocate control panel -->\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <mat-icon class=\"header-icon\">my_location</mat-icon>\n          Find Current Location\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <app-geolocate-input></app-geolocate-input>\n    </mat-expansion-panel>\n\n    <!-- Geocode control panel -->\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <mat-icon class=\"header-icon\">location_city</mat-icon>\n          Search for an Address\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <app-geocode-input></app-geocode-input>\n    </mat-expansion-panel>\n\n    <!-- Coordinate Control panel -->\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <mat-icon class=\"header-icon\">language</mat-icon>\n          Enter Coordinates\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <app-coordinate-input></app-coordinate-input>\n    </mat-expansion-panel>\n\n  </mat-accordion>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n  <button\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"dialogRef.close()\"\n  >\n    Close\n  </button>\n</mat-dialog-actions>`,\n  styles: [`.location-controls{display:block;margin:2px 0 3px}.mat-dialog-container{background:#fafafa}.header-icon{color:#666;margin:0 1em 0 0}.location-controls mat-panel-title{-webkit-box-align:center;-ms-flex-align:center;align-items:center}`]\n})\nexport class LocationDialogComponent implements OnInit {\n\n  constructor(\n    public dialogRef: MatDialogRef<LocationDialogComponent>\n  ) { }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { MatDialog } from '@angular/material';\n\nimport { Coordinates } from '../coordinates';\nimport { CoordinatesService } from '../coordinates.service';\nimport { LocationDialogComponent } from '../location-dialog/location-dialog.component';\n\n@Component({\n  selector: 'app-geoserve-output',\n  template: `<div *ngIf=\"coordinatesService.coordinates | async; else noCoordinates\">\n  <app-location-output></app-location-output>\n  <app-admin-region></app-admin-region>\n  <app-authoritative-region></app-authoritative-region>\n  <app-nearby-places></app-nearby-places>\n  <app-neic-catalog-region></app-neic-catalog-region>\n  <app-neic-response-region></app-neic-response-region>\n  <app-offshore-region></app-offshore-region>\n  <app-tectonic-summary-region></app-tectonic-summary-region>\n</div>\n\n<ng-template #noCoordinates>\n  <p class=\"alert info\">\n    To select a location, click the\n    <button mat-raised-button class=\"icon-button\" (click)=\"onClick()\">\n      <i class=\"material-icons\">location_searching</i>\n    </button>on the map.\n  </p>\n</ng-template>`,\n  styles: [``]\n})\nexport class GeoserveOutputComponent {\n  // event passed from executive summary\n  @Input() set coordinates (coordinates: Coordinates) {\n    if (coordinates) {\n      this.coordinatesService.setCoordinates(coordinates);\n    }\n  }\n\n  constructor (\n    public coordinatesService: CoordinatesService,\n    public dialog: MatDialog\n  ) { }\n\n  onClick(): void {\n    if (this.dialog && LocationDialogComponent) {\n      this.dialog.open(LocationDialogComponent);\n    }\n  }\n}\n",
    "import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-list-item',\n  template: `<dt class=\"title\">{{ TITLE }}</dt>\n<dd class=\"data\">{{ DATA }}</dd>\n\n`,\n  styles: [``]\n})\nexport class ListItemComponent implements OnInit {\n\n  @Input() TITLE: any;\n  @Input() DATA: any;\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\n\nimport { CoordinatesService } from '../../coordinates.service';\n\n@Component({\n  selector: 'app-location-output',\n  template: `<div *ngIf=\"coordinatesService.coordinates | async; let coordinates\" class=\"location-output\">\n  <h2>Location</h2>\n  <p class=\"coordinates alert success\">\n    (\n      {{ coordinates?.latitude }},\n      {{ coordinates?.longitude }}\n    )\n  </p>\n</div>\n`,\n  styles: [``]\n})\nexport class LocationOutputComponent implements OnInit {\n\n  constructor (public coordinatesService: CoordinatesService) {}\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-nearby-place',\n  template: `<span class=\"name\">{{ getName(place) }}</span>\n<aside class=\"distance\">{{ getDistance(place) }}</aside>\n<aside class=\"population\">{{ getPopulation(place) }}</aside>\n`,\n  styles: [`.name{display:block}.distance,.population{color:#666;display:block;float:left;font-size:smaller}.population{float:right}`]\n})\nexport class NearbyPlaceComponent implements OnInit {\n  @Input() place: any;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  getName (place: any): string  {\n    return (place.properties.name + ', '\n      + place.properties.admin1_name + ', '\n      + place.properties.country_name\n    );\n  }\n\n  getDistance (place: any): string {\n    const distanceKm = place.properties.distance;\n\n    return (\n      this.round(distanceKm, 1) + 'km '\n      + '(' + this.round(this.kmToMi(distanceKm), 1) + 'mi) '\n      + this.compassWinds(place.properties.azimuth)\n    );\n  }\n\n  getPopulation (place: any): string {\n    return 'Population: ' + place.properties.population;\n  }\n\n  compassWinds (azimuth: any): string {\n    const fullwind = 22.5;\n    const directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE',\n      'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW', 'N'];\n\n    // if direction is already in compass points\n    if (directions.indexOf(azimuth) > -1) {\n      return azimuth;\n    }\n\n    return directions[(Math.round((azimuth % 360) / fullwind))];\n  }\n\n  kmToMi (km: number): number {\n    return km * 0.621371;\n  }\n\n  round (raw: number, decimals: number): number {\n    const factor = Math.pow(10, decimals);\n\n    return Math.round(raw * factor) / factor;\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, tap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nimport { environment } from '../environments/environment';\n\nimport { CoordinatesService } from './coordinates.service';\n\n\n@Injectable()\nexport class PlacesService {\n\n  public readonly PLACES_URL = environment.apiUrl + 'places.json';\n\n  private _places: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  public readonly places: Observable<any> = this._places.asObservable();\n\n\n  constructor (\n    private coordinatesService: CoordinatesService,\n    private http: HttpClient\n  ) {\n    // subscribe to coordinates service\n    this.coordinatesService.coordinates.subscribe((coordinates) => {\n      // make request to places service when coordinates update\n      this.getPlaces(coordinates.latitude, coordinates.longitude);\n    });\n  }\n\n  empty (): void {\n    this._places.next(null);\n  }\n\n  getPlaces (latitude: number, longitude: number): void {\n    const url = this.buildUrl(latitude, longitude);\n\n    this.http.get<any>(url).pipe(\n      catchError(this.handleError('getPlaces', {event: {features: []}}))\n    ).subscribe((response) => {\n      this._places.next(response.event.features);\n    });\n  }\n\n\n  private handleError<T> (action: string, result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error);\n      return of(result as T);\n    };\n  }\n\n  buildUrl (latitude: number, longitude: number): string {\n    // normalize longitude for search\n    while (longitude <= -180) {\n      longitude += 360;\n    }\n    while (longitude > 180) {\n      longitude -= 360;\n    }\n\n    return this.PLACES_URL + '?' +\n      `latitude=${latitude}` +\n      `&longitude=${longitude}` +\n      '&type=event';\n  }\n}\n",
    "import { Component, OnInit, Input } from '@angular/core';\n\nimport { PlacesService } from '../../places.service';\n\n\n@Component({\n  selector: 'app-nearby-places',\n  template: `<h2>Nearby Places</h2>\n<div *ngIf=\"placesService.places | async; else noNearbyPlaces\">\n  <ol>\n    <li *ngFor=\"let place of placesService.places | async\">\n      <app-nearby-place [place]=\"place\"></app-nearby-place>\n    </li>\n  </ol>\n</div>\n\n<ng-template #noNearbyPlaces>\n  <app-no-data></app-no-data>\n</ng-template>\n`,\n  styles: [`ol{list-style:none;padding:0}li{clear:both;margin-bottom:.5em;overflow:hidden}`]\n})\nexport class NearbyPlacesComponent implements OnInit {\n\n  constructor (public readonly placesService: PlacesService) { }\n\n  ngOnInit () {\n  }\n\n}\n",
    "import { Component, OnInit } from '@angular/core';\n\nimport { RegionsService } from '../../regions.service';\n\n@Component({\n  selector: 'app-neic-catalog-region',\n  template: `<!-- NEIC Catalog region was returned, display the region -->\n<h2>NEIC Catalog Region</h2>\n<div *ngIf=\"regionsService.neicCatalog | async; else noRegion;\n    let region \"class=\"output-section\">\n  <dl class=\"neic-catalog-region\">\n    <app-list-item TITLE=\"Name\" DATA=\"{{ region?.properties.name }}\">\n    </app-list-item>\n    <app-list-item TITLE=\"Type\" DATA=\"{{ region?.properties.type }}\">\n    </app-list-item>\n    <app-list-item TITLE=\"Magnitude\" DATA=\"{{ region?.properties.magnitude }}\">\n    </app-list-item>\n  </dl>\n</div>\n\n<!-- No NEIC Catalog region was returned -->\n<ng-template #noRegion>\n  <app-no-data></app-no-data>\n</ng-template>\n`,\n  styles: [``]\n})\nexport class NeicCatalogRegionComponent implements OnInit {\n\n  constructor (public readonly regionsService: RegionsService) { }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, OnInit } from '@angular/core';\n\nimport { RegionsService } from '../../regions.service';\n\n@Component({\n  selector: 'app-neic-response-region',\n  template: `<!-- NEIC Response region was returned, display the region -->\n<h2>NEIC Response Region</h2>\n<div *ngIf=\"regionsService.neicResponse | async; else noRegion;\n    let region\" class=\"output-section\">\n  <dl class=\"neic-response-region\">\n    <app-list-item TITLE=\"Name\" DATA=\"{{ region?.properties.name }}\">\n    </app-list-item>\n    <app-list-item TITLE=\"Magnitude\" DATA=\"{{ region?.properties.magnitude }}\">\n    </app-list-item>\n    <app-list-item TITLE=\"Type\" DATA=\"{{ region?.properties.type }}\">\n    </app-list-item>\n  </dl>\n</div>\n\n<!-- No administrative region was returned -->\n<ng-template #noRegion>\n  <app-no-data></app-no-data>\n</ng-template>\n`,\n  styles: [``]\n})\nexport class NeicResponseRegionComponent implements OnInit {\n\n  constructor(public readonly regionsService: RegionsService) { }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-no-data',\n  template: `<div  class=\"no-data\">\n  <p>\n    Data not available.\n  </p>\n</div>`,\n  styles: [``]\n})\nexport class NoDataComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, OnInit } from '@angular/core';\n\nimport { RegionsService } from '../../regions.service';\n\n@Component({\n  selector: 'app-offshore-region',\n  template: `<!-- Offshore region was returned, display the region -->\n<h2>Offshore Region</h2>\n<div *ngIf=\"regionsService.offshoreRegions | async; else noOffshoreRegion;\n    let offshoreRegions\" class=\"output-section\">\n  <dl class=\"offshore-region\">\n    <app-list-item TITLE=\"Name\" DATA=\"{{ offshoreRegions?.properties.name }}\">\n    </app-list-item>\n  </dl>\n</div>\n\n<!-- No offshore region was returned -->\n<ng-template #noOffshoreRegion>\n  <app-no-data></app-no-data>\n</ng-template>\n`,\n  styles: [``]\n})\nexport class OffshoreRegionComponent implements OnInit {\n\n  constructor (public readonly regionsService: RegionsService) { }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, OnInit } from '@angular/core';\n\nimport { RegionsService } from '../../regions.service';\n\n@Component({\n  selector: 'app-tectonic-summary-region',\n  template: `<h2>Tectonic Summary</h2>\n<div *ngIf=\"regionsService.tectonic | async; else noTectonic; let tectonic\"\n    class=\"tectonic-output\">\n  <div [innerHTML]=\"tectonic?.properties.summary\">\n  </div>\n</div>\n\n<ng-template #noTectonic>\n  <app-no-data></app-no-data>\n</ng-template>`,\n  styles: [``]\n})\nexport class TectonicSummaryRegionComponent implements OnInit {\n\n  constructor(public readonly regionsService: RegionsService) { }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AdminRegionComponent } from './admin-region/admin-region.component';\nimport { AuthoritativeRegionComponent } from './authoritative-region/authoritative-region.component';\nimport { GeoserveOutputComponent } from './geoserve-output.component';\nimport { ListItemComponent } from './list-item/list-item.component';\nimport { LocationOutputComponent } from './location-output/location-output.component';\nimport { NearbyPlaceComponent } from './nearby-place/nearby-place.component';\nimport { NearbyPlacesComponent } from './nearby-places/nearby-places.component';\nimport { NeicCatalogRegionComponent } from './neic-catalog-region/neic-catalog-region.component';\nimport { NeicResponseRegionComponent } from './neic-response-region/neic-response-region.component';\nimport { NoDataComponent } from './no-data/no-data.component';\nimport { OffshoreRegionComponent } from './offshore-region/offshore-region.component';\nimport { TectonicSummaryRegionComponent } from './tectonic-summary-region/tectonic-summary-region.component';\n\nimport { CoordinatesService } from '../coordinates.service';\nimport { PlacesService } from '../places.service';\nimport { RegionsService } from '../regions.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    AdminRegionComponent,\n    AuthoritativeRegionComponent,\n    GeoserveOutputComponent,\n    ListItemComponent,\n    LocationOutputComponent,\n    NearbyPlaceComponent,\n    NearbyPlacesComponent,\n    NeicCatalogRegionComponent,\n    NeicResponseRegionComponent,\n    NoDataComponent,\n    OffshoreRegionComponent,\n    TectonicSummaryRegionComponent\n  ],\n  exports: [\n    AdminRegionComponent,\n    AuthoritativeRegionComponent,\n    GeoserveOutputComponent,\n    LocationOutputComponent,\n    NearbyPlaceComponent,\n    NearbyPlacesComponent,\n    NeicCatalogRegionComponent,\n    NeicResponseRegionComponent,\n    NoDataComponent,\n    OffshoreRegionComponent,\n    TectonicSummaryRegionComponent\n  ],\n  providers: [\n    CoordinatesService,\n    PlacesService,\n    RegionsService\n  ]\n})\nexport class GeoserveOutputModule { }\n"
  ],
  "names": [
    "environment",
    "production",
    "apiUrl",
    "siteUrl",
    "CoordinatesService",
    "this",
    "_coordinates",
    "BehaviorSubject",
    "coordinates",
    "asObservable",
    "HIGH_CONFIDENCE",
    "ABOVE_AVERAGE_CONFIDENCE",
    "AVERAGE_CONFIDENCE",
    "BELOW_AVERAGE_CONFIDENCE",
    "LOW_CONFIDENCE",
    "NO_CONFIDENCE",
    "NOT_COMPUTED",
    "prototype",
    "computeFromCoordinates",
    "latitude",
    "longitude",
    "minDecimals",
    "latitudePieces",
    "split",
    "longitudePieces",
    "length",
    "Math",
    "min",
    "computeFromGeocode",
    "geocodeLocation",
    "confidence",
    "extent",
    "max",
    "abs",
    "xmax",
    "xmin",
    "ymax",
    "ymin",
    "computeFromGeolocate",
    "accuracy",
    "computeFromPoint",
    "zoom",
    "computeZoomFromConfidence",
    "roundLocation",
    "value",
    "rounded",
    "decimals",
    "parseFloat",
    "toFixed",
    "setCoordinates",
    "location",
    "next",
    "method",
    "name",
    "type",
    "Injectable",
    "RegionsService",
    "coordinatesService",
    "http",
    "_this",
    "REGIONS_URL",
    "_adminRegions",
    "_authoritative",
    "_neicCatalog",
    "_neicResponse",
    "_tectonic",
    "_offshoreRegions",
    "adminRegions",
    "authoritative",
    "neicCatalog",
    "neicResponse",
    "offshoreRegions",
    "tectonic",
    "subscribe",
    "getRegions",
    "empty",
    "url",
    "buildUrl",
    "get",
    "pipe",
    "catchError",
    "handleError",
    "data",
    "admin",
    "features",
    "neiccatalog",
    "neicresponse",
    "offshore",
    "action",
    "result",
    "error",
    "console",
    "message",
    "of",
    "HttpClient",
    "AdminRegionComponent",
    "regionsService",
    "ngOnInit",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "AuthoritativeRegionComponent",
    "LocationDialogComponent",
    "dialogRef",
    "MatDialogRef",
    "GeoserveOutputComponent",
    "dialog",
    "Object",
    "defineProperty",
    "set",
    "onClick",
    "open",
    "MatDialog",
    "Input",
    "ListItemComponent",
    "TITLE",
    "DATA",
    "LocationOutputComponent",
    "NearbyPlaceComponent",
    "getName",
    "place",
    "properties",
    "admin1_name",
    "country_name",
    "getDistance",
    "distanceKm",
    "distance",
    "round",
    "kmToMi",
    "compassWinds",
    "azimuth",
    "getPopulation",
    "population",
    "directions",
    "indexOf",
    "km",
    "raw",
    "factor",
    "pow",
    "PlacesService",
    "PLACES_URL",
    "_places",
    "places",
    "getPlaces",
    "event",
    "response",
    "NearbyPlacesComponent",
    "placesService",
    "NeicCatalogRegionComponent",
    "NeicResponseRegionComponent",
    "NoDataComponent",
    "OffshoreRegionComponent",
    "TectonicSummaryRegionComponent",
    "GeoserveOutputModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports",
    "providers"
  ],
  "mappings": "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"
}
