{
  "version": 3,
  "file": "earthquake-geoserve-ui.umd.js",
  "sources": [
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/geoserve-output.module.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/tectonic-summary-region/tectonic-summary-region.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/offshore-region/offshore-region.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/no-data/no-data.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/neic-response-region/neic-response-region.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/neic-catalog-region/neic-catalog-region.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/nearby-places/nearby-places.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/places.service.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/nearby-place/nearby-place.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/location-output/location-output.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/list-item/list-item.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/geoserve-output.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/location-dialog/location-dialog.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/authoritative-region/authoritative-region.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/geoserve-output/admin-region/admin-region.component.ts",
    "ng://earthquake-geoserve-ui/out/src/app/regions.service.ts",
    "ng://earthquake-geoserve-ui/out/src/app/coordinates.service.ts",
    "ng://earthquake-geoserve-ui/out/src/environments/environment.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AdminRegionComponent } from './admin-region/admin-region.component';\nimport { AuthoritativeRegionComponent } from './authoritative-region/authoritative-region.component';\nimport { GeoserveOutputComponent } from './geoserve-output.component';\nimport { ListItemComponent } from './list-item/list-item.component';\nimport { LocationOutputComponent } from './location-output/location-output.component';\nimport { NearbyPlaceComponent } from './nearby-place/nearby-place.component';\nimport { NearbyPlacesComponent } from './nearby-places/nearby-places.component';\nimport { NeicCatalogRegionComponent } from './neic-catalog-region/neic-catalog-region.component';\nimport { NeicResponseRegionComponent } from './neic-response-region/neic-response-region.component';\nimport { NoDataComponent } from './no-data/no-data.component';\nimport { OffshoreRegionComponent } from './offshore-region/offshore-region.component';\nimport { TectonicSummaryRegionComponent } from './tectonic-summary-region/tectonic-summary-region.component';\n\nimport { CoordinatesService } from '../coordinates.service';\nimport { PlacesService } from '../places.service';\nimport { RegionsService } from '../regions.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    AdminRegionComponent,\n    AuthoritativeRegionComponent,\n    GeoserveOutputComponent,\n    ListItemComponent,\n    LocationOutputComponent,\n    NearbyPlaceComponent,\n    NearbyPlacesComponent,\n    NeicCatalogRegionComponent,\n    NeicResponseRegionComponent,\n    NoDataComponent,\n    OffshoreRegionComponent,\n    TectonicSummaryRegionComponent\n  ],\n  exports: [\n    AdminRegionComponent,\n    AuthoritativeRegionComponent,\n    GeoserveOutputComponent,\n    LocationOutputComponent,\n    NearbyPlaceComponent,\n    NearbyPlacesComponent,\n    NeicCatalogRegionComponent,\n    NeicResponseRegionComponent,\n    NoDataComponent,\n    OffshoreRegionComponent,\n    TectonicSummaryRegionComponent\n  ],\n  providers: [\n    CoordinatesService,\n    PlacesService,\n    RegionsService\n  ]\n})\nexport class GeoserveOutputModule { }\n",
    "import { Component, OnInit } from '@angular/core';\n\nimport { RegionsService } from '../../regions.service';\n\n@Component({\n  selector: 'app-tectonic-summary-region',\n  template: `<h2>Tectonic Summary</h2>\n<div *ngIf=\"regionsService.tectonic | async; else noTectonic; let tectonic\"\n    class=\"tectonic-output\">\n  <div [innerHTML]=\"tectonic?.properties.summary\">\n  </div>\n</div>\n\n<ng-template #noTectonic>\n  <app-no-data></app-no-data>\n</ng-template>`,\n  styles: [``]\n})\nexport class TectonicSummaryRegionComponent implements OnInit {\n\n  constructor(public readonly regionsService: RegionsService) { }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, OnInit } from '@angular/core';\n\nimport { RegionsService } from '../../regions.service';\n\n@Component({\n  selector: 'app-offshore-region',\n  template: `<!-- Offshore region was returned, display the region -->\n<h2>Offshore Region</h2>\n<div *ngIf=\"regionsService.offshoreRegions | async; else noOffshoreRegion;\n    let offshoreRegions\" class=\"output-section\">\n  <dl class=\"offshore-region\">\n    <app-list-item TITLE=\"Name\" DATA=\"{{ offshoreRegions?.properties.name }}\">\n    </app-list-item>\n  </dl>\n</div>\n\n<!-- No offshore region was returned -->\n<ng-template #noOffshoreRegion>\n  <app-no-data></app-no-data>\n</ng-template>\n`,\n  styles: [``]\n})\nexport class OffshoreRegionComponent implements OnInit {\n\n  constructor (public readonly regionsService: RegionsService) { }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-no-data',\n  template: `<div  class=\"no-data\">\n  <p>\n    Data not available.\n  </p>\n</div>`,\n  styles: [``]\n})\nexport class NoDataComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, OnInit } from '@angular/core';\n\nimport { RegionsService } from '../../regions.service';\n\n@Component({\n  selector: 'app-neic-response-region',\n  template: `<!-- NEIC Response region was returned, display the region -->\n<h2>NEIC Response Region</h2>\n<div *ngIf=\"regionsService.neicResponse | async; else noRegion;\n    let region\" class=\"output-section\">\n  <dl class=\"neic-response-region\">\n    <app-list-item TITLE=\"Name\" DATA=\"{{ region?.properties.name }}\">\n    </app-list-item>\n    <app-list-item TITLE=\"Magnitude\" DATA=\"{{ region?.properties.magnitude }}\">\n    </app-list-item>\n    <app-list-item TITLE=\"Type\" DATA=\"{{ region?.properties.type }}\">\n    </app-list-item>\n  </dl>\n</div>\n\n<!-- No administrative region was returned -->\n<ng-template #noRegion>\n  <app-no-data></app-no-data>\n</ng-template>\n`,\n  styles: [``]\n})\nexport class NeicResponseRegionComponent implements OnInit {\n\n  constructor(public readonly regionsService: RegionsService) { }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, OnInit } from '@angular/core';\n\nimport { RegionsService } from '../../regions.service';\n\n@Component({\n  selector: 'app-neic-catalog-region',\n  template: `<!-- NEIC Catalog region was returned, display the region -->\n<h2>NEIC Catalog Region</h2>\n<div *ngIf=\"regionsService.neicCatalog | async; else noRegion;\n    let region \"class=\"output-section\">\n  <dl class=\"neic-catalog-region\">\n    <app-list-item TITLE=\"Name\" DATA=\"{{ region?.properties.name }}\">\n    </app-list-item>\n    <app-list-item TITLE=\"Type\" DATA=\"{{ region?.properties.type }}\">\n    </app-list-item>\n    <app-list-item TITLE=\"Magnitude\" DATA=\"{{ region?.properties.magnitude }}\">\n    </app-list-item>\n  </dl>\n</div>\n\n<!-- No NEIC Catalog region was returned -->\n<ng-template #noRegion>\n  <app-no-data></app-no-data>\n</ng-template>\n`,\n  styles: [``]\n})\nexport class NeicCatalogRegionComponent implements OnInit {\n\n  constructor (public readonly regionsService: RegionsService) { }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, OnInit, Input } from '@angular/core';\n\nimport { PlacesService } from '../../places.service';\n\n\n@Component({\n  selector: 'app-nearby-places',\n  template: `<h2>Nearby Places</h2>\n<div *ngIf=\"placesService.places | async; else noNearbyPlaces\">\n  <ol>\n    <li *ngFor=\"let place of placesService.places | async\">\n      <app-nearby-place [place]=\"place\"></app-nearby-place>\n    </li>\n  </ol>\n</div>\n\n<ng-template #noNearbyPlaces>\n  <app-no-data></app-no-data>\n</ng-template>\n`,\n  styles: [`ol{list-style:none;padding:0}li{clear:both;margin-bottom:.5em;overflow:hidden}`]\n})\nexport class NearbyPlacesComponent implements OnInit {\n\n  constructor (public readonly placesService: PlacesService) { }\n\n  ngOnInit () {\n  }\n\n}\n",
    "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, tap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nimport { environment } from '../environments/environment';\n\nimport { CoordinatesService } from './coordinates.service';\n\n\n@Injectable()\nexport class PlacesService {\n\n  public readonly PLACES_URL = environment.apiUrl + 'places.json';\n\n  private _places: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  public readonly places: Observable<any> = this._places.asObservable();\n\n\n  constructor (\n    private coordinatesService: CoordinatesService,\n    private http: HttpClient\n  ) {\n    // subscribe to coordinates service\n    this.coordinatesService.coordinates.subscribe((coordinates) => {\n      // make request to places service when coordinates update\n      this.getPlaces(coordinates.latitude, coordinates.longitude);\n    });\n  }\n\n  empty (): void {\n    this._places.next(null);\n  }\n\n  getPlaces (latitude: number, longitude: number): void {\n    const url = this.buildUrl(latitude, longitude);\n\n    this.http.get<any>(url).pipe(\n      catchError(this.handleError('getPlaces', {event: {features: []}}))\n    ).subscribe((response) => {\n      this._places.next(response.event.features);\n    });\n  }\n\n\n  private handleError<T> (action: string, result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error);\n      return of(result as T);\n    };\n  }\n\n  buildUrl (latitude: number, longitude: number): string {\n    // normalize longitude for search\n    while (longitude <= -180) {\n      longitude += 360;\n    }\n    while (longitude > 180) {\n      longitude -= 360;\n    }\n\n    return this.PLACES_URL + '?' +\n      `latitude=${latitude}` +\n      `&longitude=${longitude}` +\n      '&type=event';\n  }\n}\n",
    "import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-nearby-place',\n  template: `<span class=\"name\">{{ getName(place) }}</span>\n<aside class=\"distance\">{{ getDistance(place) }}</aside>\n<aside class=\"population\">{{ getPopulation(place) }}</aside>\n`,\n  styles: [`.name{display:block}.distance,.population{color:#666;display:block;float:left;font-size:smaller}.population{float:right}`]\n})\nexport class NearbyPlaceComponent implements OnInit {\n  @Input() place: any;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  getName (place: any): string  {\n    return (place.properties.name + ', '\n      + place.properties.admin1_name + ', '\n      + place.properties.country_name\n    );\n  }\n\n  getDistance (place: any): string {\n    const distanceKm = place.properties.distance;\n\n    return (\n      this.round(distanceKm, 1) + 'km '\n      + '(' + this.round(this.kmToMi(distanceKm), 1) + 'mi) '\n      + this.compassWinds(place.properties.azimuth)\n    );\n  }\n\n  getPopulation (place: any): string {\n    return 'Population: ' + place.properties.population;\n  }\n\n  compassWinds (azimuth: any): string {\n    const fullwind = 22.5;\n    const directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE',\n      'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW', 'N'];\n\n    // if direction is already in compass points\n    if (directions.indexOf(azimuth) > -1) {\n      return azimuth;\n    }\n\n    return directions[(Math.round((azimuth % 360) / fullwind))];\n  }\n\n  kmToMi (km: number): number {\n    return km * 0.621371;\n  }\n\n  round (raw: number, decimals: number): number {\n    const factor = Math.pow(10, decimals);\n\n    return Math.round(raw * factor) / factor;\n  }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\n\nimport { CoordinatesService } from '../../coordinates.service';\n\n@Component({\n  selector: 'app-location-output',\n  template: `<div *ngIf=\"coordinatesService.coordinates | async; let coordinates\" class=\"location-output\">\n  <h2>Location</h2>\n  <p class=\"coordinates alert success\">\n    (\n      {{ coordinates?.latitude }},\n      {{ coordinates?.longitude }}\n    )\n  </p>\n</div>\n`,\n  styles: [``]\n})\nexport class LocationOutputComponent implements OnInit {\n\n  constructor (public coordinatesService: CoordinatesService) {}\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-list-item',\n  template: `<dt class=\"title\">{{ TITLE }}</dt>\n<dd class=\"data\">{{ DATA }}</dd>\n\n`,\n  styles: [``]\n})\nexport class ListItemComponent implements OnInit {\n\n  @Input() TITLE: any;\n  @Input() DATA: any;\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { MatDialog } from '@angular/material';\n\nimport { Coordinates } from '../coordinates';\nimport { CoordinatesService } from '../coordinates.service';\nimport { LocationDialogComponent } from '../location-dialog/location-dialog.component';\n\n@Component({\n  selector: 'app-geoserve-output',\n  template: `<div *ngIf=\"coordinatesService.coordinates | async; else noCoordinates\">\n  <app-location-output></app-location-output>\n  <app-admin-region></app-admin-region>\n  <app-authoritative-region></app-authoritative-region>\n  <app-nearby-places></app-nearby-places>\n  <app-neic-catalog-region></app-neic-catalog-region>\n  <app-neic-response-region></app-neic-response-region>\n  <app-offshore-region></app-offshore-region>\n  <app-tectonic-summary-region></app-tectonic-summary-region>\n</div>\n\n<ng-template #noCoordinates>\n  <p class=\"alert info\">\n    To select a location, click the\n    <button mat-raised-button class=\"icon-button\" (click)=\"onClick()\">\n      <i class=\"material-icons\">location_searching</i>\n    </button>on the map.\n  </p>\n</ng-template>`,\n  styles: [``]\n})\nexport class GeoserveOutputComponent {\n  // event passed from executive summary\n  @Input() set coordinates (coordinates: Coordinates) {\n    if (coordinates) {\n      this.coordinatesService.setCoordinates(coordinates);\n    }\n  }\n\n  constructor (\n    public coordinatesService: CoordinatesService,\n    public dialog: MatDialog\n  ) { }\n\n  onClick(): void {\n    if (this.dialog && LocationDialogComponent) {\n      this.dialog.open(LocationDialogComponent);\n    }\n  }\n}\n",
    "import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material';\n\n@Component({\n  selector: 'app-location-dialog',\n  template: `\n<h1 mat-dialog-title>Choose a Location</h1>\n<p>\n  Use one of the methods below to add a location to the map.\n</p>\n\n<mat-dialog-content>\n  <mat-accordion class=\"location-controls\">\n    <!-- Geolocate control panel -->\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <mat-icon class=\"header-icon\">my_location</mat-icon>\n          Find Current Location\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <app-geolocate-input></app-geolocate-input>\n    </mat-expansion-panel>\n\n    <!-- Geocode control panel -->\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <mat-icon class=\"header-icon\">location_city</mat-icon>\n          Search for an Address\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <app-geocode-input></app-geocode-input>\n    </mat-expansion-panel>\n\n    <!-- Coordinate Control panel -->\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <mat-icon class=\"header-icon\">language</mat-icon>\n          Enter Coordinates\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <app-coordinate-input></app-coordinate-input>\n    </mat-expansion-panel>\n\n  </mat-accordion>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n  <button\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"dialogRef.close()\"\n  >\n    Close\n  </button>\n</mat-dialog-actions>`,\n  styles: [`.location-controls{display:block;margin:2px 0 3px}.mat-dialog-container{background:#fafafa}.header-icon{color:#666;margin:0 1em 0 0}.location-controls mat-panel-title{-webkit-box-align:center;-ms-flex-align:center;align-items:center}`]\n})\nexport class LocationDialogComponent implements OnInit {\n\n  constructor(\n    public dialogRef: MatDialogRef<LocationDialogComponent>\n  ) { }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, OnInit } from '@angular/core';\n\nimport { RegionsService } from '../../regions.service';\n\n@Component({\n  selector: 'app-authoritative-region',\n  template: `<h2>Authoritative Region</h2>\n<div *ngIf=\"regionsService.authoritative | async; else noRegion;\n    let region\" class=\"output-section\">\n  <dl>\n    <app-list-item TITLE=\"Name\" DATA=\"{{ region?.properties.name }}\">\n    </app-list-item>\n    <app-list-item TITLE=\"Network\" DATA=\"{{ region?.properties.network }}\">\n    </app-list-item>\n    <app-list-item TITLE=\"Type\" DATA=\"{{ region?.properties.type }}\">\n    </app-list-item>\n  </dl>\n</div>\n\n<ng-template #noRegion>\n  <app-no-data></app-no-data>\n</ng-template>`,\n  styles: [``]\n})\nexport class AuthoritativeRegionComponent implements OnInit {\n\n  constructor(public readonly regionsService: RegionsService) { }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, OnInit } from '@angular/core';\n\nimport { Region } from '../../region';\nimport { RegionsService } from '../../regions.service';\n\n@Component({\n  selector: 'app-admin-region',\n  template: `<h2>Administrative Region</h2>\n<div *ngIf=\"regionsService.adminRegions | async; else noAdminRegion;\n    let adminRegions\" class=\"output-section\">\n  <dl class=\"admin-region\">\n    <app-list-item TITLE=\"ISO\" DATA=\"{{ adminRegions?.properties.iso }}\">\n    </app-list-item>\n    <app-list-item TITLE=\"Region\" DATA=\"{{ adminRegions?.properties.region }}\">\n    </app-list-item>\n    <app-list-item TITLE=\"Country\" DATA=\"{{ adminRegions?.properties.country }}\">\n    </app-list-item>\n  </dl>\n</div>\n\n<!-- No administrative region was returned -->\n<ng-template #noAdminRegion>\n  <app-no-data></app-no-data>\n<ng-template>\n\n\n`,\n  styles: [``]\n})\nexport class AdminRegionComponent implements OnInit {\n\n  constructor (public readonly regionsService: RegionsService) { }\n\n  ngOnInit() {\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { HttpClient} from '@angular/common/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, tap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nimport { environment } from '../environments/environment';\n\nimport { CoordinatesService } from './coordinates.service';\n\n@Injectable()\nexport class RegionsService {\n\n  public REGIONS_URL = environment.apiUrl + 'regions.json';\n\n  private _adminRegions: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  private _authoritative: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  private _coordinates: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  private _neicCatalog: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  private _neicResponse: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  private _tectonic: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  private _offshoreRegions: BehaviorSubject<any> =\n      new BehaviorSubject<any>(null);\n\n  public readonly adminRegions: Observable<any> =\n      this._adminRegions.asObservable();\n  public readonly authoritative: Observable<any> =\n      this._authoritative.asObservable();\n  public readonly coordinates: Observable<any> =\n      this._coordinates.asObservable();\n  public readonly neicCatalog: Observable<any> =\n      this._neicCatalog.asObservable();\n  public readonly neicResponse: Observable<any> =\n      this._neicResponse.asObservable();\n  public readonly offshoreRegions: Observable<any> =\n      this._offshoreRegions.asObservable();\n  public readonly tectonic: Observable<any> =\n      this._tectonic.asObservable();\n\n\n  constructor (\n    private coordinatesService: CoordinatesService,\n    private http: HttpClient\n  ) {\n    // subscribe to coordinates service\n    this.coordinatesService.coordinates.subscribe((coordinates) => {\n      // make request to regions service when coordinates update\n      this.getRegions(coordinates.latitude, coordinates.longitude);\n    });\n  }\n\n  empty (): void {\n    this._adminRegions.next(null);\n    this._authoritative.next(null);\n    this._neicCatalog.next(null);\n    this._neicResponse.next(null);\n    this._offshoreRegions.next(null);\n    this._tectonic.next(null);\n  }\n\n  getRegions (latitude: number, longitude: number): void {\n    const url = this.buildUrl(latitude, longitude);\n\n    this.http.get<any>(url).pipe(\n      catchError(this.handleError('getRegions', {}))\n    ).subscribe((data) => {\n      if (data.admin) {\n        this._adminRegions.next(data.admin.features[0]);\n      } else {\n        this._adminRegions.next(null);\n      }\n      if (data.neiccatalog) {\n        this._neicCatalog.next(data.neiccatalog.features[0]);\n      } else {\n        this._neicCatalog.next(null);\n      }\n      if (data.neicresponse) {\n        this._neicResponse.next(data.neicresponse.features[0]);\n      } else {\n        this._neicResponse.next(null);\n      }\n      if (data.tectonic) {\n        this._tectonic.next(data.tectonic.features[0]);\n      } else {\n        this._tectonic.next(null);\n      }\n      if (data.offshore) {\n        this._offshoreRegions.next(data.offshore.features[0]);\n      } else {\n        this._offshoreRegions.next(null);\n      }\n      if (data.authoritative) {\n        this._authoritative.next(data.authoritative.features[0]);\n      } else {\n        this._authoritative.next(null);\n      }\n    });\n  }\n\n  private handleError<T> (action: string, result?: T) {\n    return(error: any): Observable<T> => {\n      console.error('RegionsService::handleError::' + action + '(' + error.message + ')');\n      return of(result as T);\n    };\n  }\n\n  buildUrl (latitude: number, longitude: number): string {\n    // normalize longitude for search\n    while (longitude <= -180) {\n      longitude += 360;\n    }\n    while (longitude > 180) {\n      longitude -= 360;\n    }\n\n    return this.REGIONS_URL + '?' +\n      `latitude=${latitude}` +\n      `&longitude=${longitude}`;\n  }\n}\n",
    "import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, tap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nimport { Coordinates } from './coordinates';\n\n\n@Injectable()\nexport class CoordinatesService {\n\n  private _coordinates: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n  public readonly coordinates: Observable<Coordinates> = this._coordinates.asObservable();\n\n\n  constructor() {}\n\n  // ----------------------------------------------------------------------\n  // Public Static Variables\n  // ----------------------------------------------------------------------\n\n  /** Constant used to indicate high degree of confidence. */\n  HIGH_CONFIDENCE = 5;\n\n  /** Constant used to indicate above average confidence. */\n  ABOVE_AVERAGE_CONFIDENCE = 4;\n\n  /** Constant used to indicate moderate degree of confidence. */\n  AVERAGE_CONFIDENCE = 3;\n\n  /** Constant used to indicate below average confidence. */\n  BELOW_AVERAGE_CONFIDENCE = 2;\n\n  /** Constant used to indicate low degree of confidence. */\n  LOW_CONFIDENCE = 1;\n\n  /** Constant used to indicate very low degree of confidence. */\n  NO_CONFIDENCE = 0;\n\n  /**\n   * Constant used to indicate confidence was not computed or an error occurred\n   * while computing the confidence\n   */\n  NOT_COMPUTED = -1;\n\n  /**\n   * Compute Confidence given latitude and longitude. Latitude and longitude\n   * must be strings to keep accuracy.\n   * Confidence is based on the number of digits past the decimal.\n   *\n   * @params latititude {String}\n   * @params longitude {String}\n   *\n   */\n  public computeFromCoordinates (latitude: string, longitude: string): number {\n    if (typeof latitude !== 'string' || typeof longitude !== 'string') {\n      return this.NOT_COMPUTED;\n    }\n\n    let minDecimals;\n\n    const latitudePieces = latitude.split('.'),\n        longitudePieces = longitude.split('.');\n\n    if (latitudePieces.length === 1 || longitudePieces.length === 1) {\n      minDecimals = 0;\n    } else {\n      minDecimals = Math.min(latitudePieces[1].length,\n          longitudePieces[1].length);\n    }\n\n\n    if (minDecimals >= 5) {\n      return this.HIGH_CONFIDENCE;\n    } else if (minDecimals >= 4) {\n      return this.ABOVE_AVERAGE_CONFIDENCE;\n    } else if (minDecimals >= 3) {\n      return this.AVERAGE_CONFIDENCE;\n    } else if (minDecimals >= 2) {\n      return this.BELOW_AVERAGE_CONFIDENCE;\n    } else if (minDecimals >= 1) {\n      return this.LOW_CONFIDENCE;\n    } else if (minDecimals >= 0) {\n      return this.NO_CONFIDENCE;\n    } else {\n      return this.NOT_COMPUTED;\n    }\n  }\n\n\n  /**\n   * Compute Confidence given a geocode result location with an extent.\n   *\n   * @params geocodeLocation {object}\n   *      an esri response via the ArcGIS REST API\n   *\n   * @see https://developers.arcgis.com/en/features/geocoding/\n   */\n  public computeFromGeocode (geocodeLocation: any): number {\n    let confidence,\n        extent,\n        max;\n\n    extent = geocodeLocation.extent;\n\n    // find the largest dimension of the extent\n    if (extent) {\n      max = Math.max(Math.abs(extent.xmax - extent.xmin),\n          Math.abs(extent.ymax - extent.ymin));\n\n      // calculate confidence based on the location's extent\n      if (max < 0.001) {\n        confidence = this.HIGH_CONFIDENCE;\n      } else if (max < 0.01) {\n        confidence = this.ABOVE_AVERAGE_CONFIDENCE;\n      } else if (max < 0.1) {\n        confidence = this.AVERAGE_CONFIDENCE;\n      } else if (max < 1) {\n        confidence = this.BELOW_AVERAGE_CONFIDENCE;\n      } else if (max < 10) {\n        confidence = this.LOW_CONFIDENCE;\n      } else if (max >= 10) {\n        confidence = this.NO_CONFIDENCE;\n      }\n    }\n\n    if (!(confidence === this.HIGH_CONFIDENCE ||\n        confidence === this.ABOVE_AVERAGE_CONFIDENCE ||\n        confidence === this.AVERAGE_CONFIDENCE ||\n        confidence === this.BELOW_AVERAGE_CONFIDENCE ||\n        confidence === this.LOW_CONFIDENCE ||\n        confidence === this.NO_CONFIDENCE)) {\n      // confidence did not match any value, bail\n      confidence = this.NOT_COMPUTED;\n    }\n\n    return confidence;\n  }\n\n\n  /**\n   * Compute Confidence given a accuracy in meters.\n   * used by GeoLocate.\n   * @params accuracy {number} indicates the accuracy in meters at 95%\n   *         confidence.\n   */\n  public computeFromGeolocate (accuracy: number): number {\n    if (accuracy > 100000) {\n      return this.LOW_CONFIDENCE;\n    } else if (accuracy > 10000) {\n      return this.BELOW_AVERAGE_CONFIDENCE;\n    } else if (accuracy > 1000) {\n      return this.AVERAGE_CONFIDENCE;\n    } else if (accuracy > 100) {\n      return this.ABOVE_AVERAGE_CONFIDENCE;\n    } else {\n      return this.HIGH_CONFIDENCE;\n    }\n  }\n\n\n  /**\n   * Compute Confidence given a zoom level.\n   * @params zoom {number} indicates the zoom level of the map.\n   */\n  public computeFromPoint (zoom: number): number {\n    if (zoom > 16) {\n      return this.HIGH_CONFIDENCE;\n    } else if (zoom > 12) {\n      return this.ABOVE_AVERAGE_CONFIDENCE;\n    } else if (zoom > 8) {\n      return this.AVERAGE_CONFIDENCE;\n    } else if (zoom > 4) {\n      return this.BELOW_AVERAGE_CONFIDENCE;\n    } else {\n      return this.LOW_CONFIDENCE;\n    }\n  }\n\n\n  /**\n   * Compute zoom level given a confidence.\n   * @params confidence {number} indicates the confidence level\n   */\n  public computeZoomFromConfidence (confidence: number): number {\n    if (confidence === this.HIGH_CONFIDENCE) {\n      return 16;\n    } else if (confidence === this.ABOVE_AVERAGE_CONFIDENCE) {\n      return 13;\n    } else if (confidence === this.AVERAGE_CONFIDENCE) {\n      return 9;\n    } else if (confidence === this.BELOW_AVERAGE_CONFIDENCE) {\n      return 5;\n    } else if (confidence === this.LOW_CONFIDENCE) {\n      return 1;\n    } else {\n      return 1;\n    }\n  }\n\n\n  /**\n   * returns rounded value based on confidence value.\n   *\n   * @params  {string | number} value\n   *           value to be rounded\n   * @params  {number} confidence\n   *           confidence value\n   * @returnn {number} rounded value\n   *\n   */\n  public roundLocation (value, confidence): number {\n    let rounded,\n        decimals = confidence;\n\n    if (confidence === this.NOT_COMPUTED) {\n      decimals = 0;\n    }\n\n    rounded = parseFloat(value).toFixed(decimals);\n    return parseFloat(rounded);\n  }\n\n  /**\n   * Set the coordinate observable.next value\n   * @params {string} latitude  [description]\n   * @params {string} longitude [description]\n   */\n  public setCoordinates (location: any): void {\n    let confidence,\n        latitude,\n        longitude;\n\n    confidence = location.confidence;\n    latitude = this.roundLocation(+location.latitude, confidence);\n    longitude = this.roundLocation(+location.longitude, confidence);\n\n    this._coordinates.next({\n      confidence: confidence,\n      latitude: latitude,\n      longitude: longitude,\n      zoom: location.zoom,\n      method: location.method,\n      name: location.name\n    });\n  }\n\n}\n",
    "// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'https://earthquake.usgs.gov/ws/geoserve/',\n  siteUrl: 'http://localhost.localdomain'\n};\n"
  ],
  "names": [
    "CommonModule",
    "NgModule",
    "Component",
    "HttpClient",
    "Injectable",
    "of",
    "catchError",
    "BehaviorSubject",
    "http",
    "Input",
    "MatDialog",
    "MatDialogRef"
  ],
  "mappings": "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"
}
